[[{"l":"\uD83C\uDFE2 OfficeSpaceManager","p":["PowerShell 7+ Build Status Test Coverage","A modular PowerShell CLI toolkit to establish a simple, and logical workflow from a single place to establish and manage Microsoft Places, Exchange Room Resources, and Metadata across Microsoft 365 environments.","This repository is still under major initial development, and should be considered 'Extreme Alpha'. Any use of this repository is at your own risk knowing there will be continued and ongoing changes underway.","Purpose","Features","Usage","Useful Microsoft Docs","TODO","License & Credits"]},{"l":"Purpose","p":["This script is intended to help someone either setup, or manage, a Microsoft Exchange and Teams environment to:","Removes the need to navigate across multiple Admin applications, scripts, blades, etc to setup and maintain","Initial configuration (right settings configured so you can do this)","Bulk upload and maintenance (by way of .csv file) of sites, buildings, floors, desk groups and desks","Manage the bookable desk lifecycle (create, manage, rename, reassign, end of life)","Ensure consistency of naming conventions for desks","Provide disaster recovery for your environment, keeping offline backups of the environment for ease of restoration if and when needed","Offline storage of data to increase speed of action","Make your job as a Microsoft Modern Workplace analyist/engineer several times easier","A more detailed explaination to the development and working approach for this project - including idea, specification, design, and folder structure - can be found in PROJECT OVERVIEW."]},{"l":"Features","p":["✅ All cmdlets and scripts use approved PowerShell verbs for discoverability and linter compliance.","✅ All connection routines are robust, session-reusing, and provide clear diagnostic output for Exchange, Teams, and Places.","✅ Auto-discovery of domains + validation of Exchange & Places configurations to support","✅ Automated first-time tenant setup (robustly enforced at launch)","✅ Backup and restore features, to enable complete download and upload of your configuration","✅ CSV template export/import for bulk editing of sites, buildings, floors, desks, desk pools, etc.","✅ Exchange Online + Microsoft Graph Places + Microsoft Teams integration","✅ Interactive CLI with modular submenus","✅ Logging, draft recovery, and error handling","✅ Metadata and site structure management, and local caching of information for speed","✅ Proactive Exchange Online connection and first-time setup enforcement","✅ Project is fully linted with PSScriptAnalyzer; all code changes validated for compliance.","✅ Resource provisioning (Desk / Room / Equipment)","✅ Robust error handling and user acknowledgement for all critical failures","✅ Simulation test suite with cleanup tools","✅ Uses native functions within existing PowerShell modules wherever possible","✅ Verbose session logging and input capture via -LogVerbose flag"]},{"l":"Usage","p":["Open PowerShell 7+","Navigate to the folder","Run:","The optional -LogVerbose flag enables full session transcript and input logging to Logs/TerminalVerbose.","On first run, you will be guided through robust first-time setup and Exchange Online connection. All errors require user acknowledgement and are logged."]},{"l":"Useful Microsoft Docs","p":["Microsoft Places Overview","Microsoft Graph Places API","Exchange Room Mailbox Docs","Set-CalendarProcessing"]},{"l":"TODO","p":["Please see TODO and KNOWNISSUES"]},{"l":"License & Credits","p":["OfficeSpaceManager – Internal Admin Toolkit© 2025 – Michael Harris. Use it well. Built with PowerShell for Microsoft 365 tenants","See LICENSE for further information; and Donations and thank you's if you would like to contribute or say thank you for this project."]}],[{"l":"User guides","p":["More comprehensive user guides will be available soon.","For now, please refer to Getting Started for initial use instructions."]}],[{"l":"Getting started","p":["Clone the repo:","Run the entry script:","Use the first-time setup wizard, interactive menu, or configuration menu."]}],[{"l":"\uD83D\uDD27 Requirements","p":["PowerShell 7.0+","Modules:","ExchangeOnlineManagement","Microsoft.Graph","MicrosoftTeams","MicrosoftPlaces","All required modules are validated as present, or user is prompted to install at runtime. Exchange Online connection and first-time setup are enforced at launch."]}],[{"l":"\uD83D\uDD01 Backup & Restore","p":["Save current metadata snapshot","Restore from snapshot"]},{"l":"Save current metadata snapshot","p":["From the menu:","Or run manually:"]},{"l":"Restore from snapshot","p":["You can also use:","To create/import a full .zip archive of your working config."]}],[{"l":"\uD83E\uDDEA Running Tests","p":["To simulate full provisioning and cleanup:","To remove all test resources:","Test results and logs are saved in:"]}],[{"l":"1. Project Idea \uD83D\uDCA1","p":["OfficeSpaceManager is a modular, production-grade PowerShell CLI toolkit designed to simplify and centralise the management of Microsoft Places, Exchange Room Resources, and associated metadata across Microsoft 365 environments. The project aims to provide a single, logical workflow for administrators to set up, maintain, and recover their environment, reducing the need to navigate multiple admin portals or scripts."]},{"l":"Vision & Rationale","p":["Centralised Management: Eliminate fragmented admin experiences by providing a unified CLI for all resource and metadata operations.","Automation & Consistency: Enable bulk operations (import/export), enforce naming conventions, and automate repetitive tasks to reduce errors and manual effort.","Disaster Recovery: Provide robust backup and restore capabilities for both configuration and metadata, ensuring business continuity.","Extensibility: Use a modular structure to allow easy addition of new features, domains, and integrations as Microsoft 365 evolves.","User Experience: Make the job of a Microsoft Modern Workplace analyst/engineer easier, faster, and less error-prone."]},{"l":"Why This Project?","p":["Manual management of Microsoft Places, Exchange resources, and metadata is time-consuming and error-prone.","Existing tools are fragmented, lack bulk/batch features, and often require deep technical knowledge.","There is a need for a repeatable, auditable, and recoverable workflow for resource management in Microsoft 365 environments."]},{"l":"Intended Audience","p":["Microsoft 365 administrators, Modern Workplace engineers, and IT professionals responsible for resource and metadata management."]},{"l":"Key Technical Principles and Recent Improvements","p":["Robust Connection Logic: Connection routines are designed to be resilient, with session reuse, robust error handling, and clear diagnostic output for all Microsoft 365 services (Exchange, Teams, Places).","Approved Verb Compliance: All cmdlets and scripts use approved PowerShell verbs, ensuring best practice, discoverability, and compatibility with PowerShell tooling.","Linting and Static Analysis: Linting and static analysis are integrated into the workflow, with PSScriptAnalyzer used to ensure code quality and prevent regressions.","Refactor Hygiene: All refactors and renames are performed project-wide, with automated updates to all references and documentation to prevent legacy issues.","Accessible and Inclusive Output: All output and documentation use EN-AU spelling and accessible, inclusive language for clarity and compliance.","Error Handling and User Experience: Error handling is standardised, with actionable messages and prompts that remain visible until acknowledged, ensuring no errors are missed."]},{"l":"Project Ideas","p":["Automated resource provisioning for Microsoft Places","Bulk import/export of metadata","Robust backup and restore","Modular CLI for all operations"]}],[{"l":"2. Project Specification \uD83D\uDCCB"},{"l":"1. Scope","p":["OfficeSpaceManager manages the lifecycle of Microsoft Places, Exchange Room Resources, and related metadata (sites, buildings, floors, desk groups, desks, desk pools) in Microsoft 365 environments."]},{"l":"2. Features","p":["Accessible Output and Documentation: All user-facing output and documentation use EN-AU spelling and accessible, inclusive language.","Approved Verb Usage: All functions, scripts, and modules use approved PowerShell verbs for discoverability and linter compliance. Refactors and renames update all references project-wide.","Automated Setup: First-time setup and validation of Exchange/Teams/Places configuration.","Backup & Restore: Full and partial backup/restore of configuration and metadata, with versioning and integrity checks.","Bulk Operations: Import/export via CSV for sites, buildings, floors, desks, desk pools, etc.","Error Handling and User Experience: All error messages are clear, actionable, and remain visible until acknowledged by the user. All catch blocks end with a user acknowledgement prompt unless handled globally. Error handling includes context (script name, operation, error details).","Extensibility: Modular codebase for easy addition of new features and domains.","Integration: Native use of ExchangeOnlineManagement, MicrosoftTeams, and Microsoft Graph modules.","Interactive CLI: Modular, menu-driven interface for all operations.","Linting and Static Analysis: All code must pass PSScriptAnalyzer linting with no critical errors. Linting and static analysis are required before every major commit or release.","Logging & Error Handling: Centralised, timestamped logging and standardised error handling across all scripts.","Metadata Management: Local caching, offline storage, and synchronisation of metadata.","Refactor Hygiene: Any rename or modularisation includes a project-wide update of all references and documentation. No legacy or obsolete references are permitted after refactor.","Resource Provisioning: Create, manage, rename, reassign, and retire desks, rooms, and equipment.","Robust Connection Logic: All service connection functions (Exchange, Teams, Places) use resilient, session-reusing logic with authoritative session validation and clear diagnostic output.","Session Validation: After any connection attempt, session validity is confirmed before proceeding with operations. If session is not valid, operations are skipped with clear messaging.","Testing: Simulation test suite for provisioning logic, with cleanup tools and test result logging.","Validation: Pre-import validation of CSV/JSON data, parameter validation, and configuration checks."]},{"l":"3. Requirements","p":["PowerShell 7.0+","Modules: ExchangeOnlineManagement, MicrosoftTeams","Supported OS: Windows (cross-platform support planned)","All dependencies validated or installed at runtime"]},{"l":"4. Constraints","p":["Must follow modularisation and code quality standards (see project instructions)","All scripts must be idempotent, robust, and production-ready","No hardcoded credentials; secure handling of secrets","All user-facing output and documentation must use inclusive, accessible language","Must support backup/restore and disaster recovery scenarios"]},{"l":"5. Intended Outcomes","p":["Streamlined, reliable admin workflows for Microsoft 365 resource management","Consistent, auditable, and recoverable environment configuration","Reduced manual effort and error rates","Improved reporting, logging, and troubleshooting","Foundation for future extensibility and automation"]},{"l":"6. Architecture: Robust Module Resolution","p":["All scripts and modules must use robust, error-proof module importing:","The project root is resolved at runtime using the Resolve-OfficeSpaceManagerRoot.ps1 helper (searches upwards for README.md or .git).","$env:OfficeSpaceManagerRoot is set and used for all Import-Module statements, ensuring absolute, reliable paths.","No script or module should use fragile relative navigation (e.g., $PSScriptRoot/..).","This approach guarantees module imports work regardless of working directory, invocation method, or platform.","See Modules/Utilities/Resolve-OfficeSpaceManagerRoot.ps1 for implementation details."]},{"l":"7. Architecture: Microsoft Cloud Connection Robustness Standards","p":["All functions that connect to Microsoft Cloud services (Exchange Online, Microsoft Graph, Microsoft Teams, etc.) must:","Ensure the required module is loaded, with robust error handling and logging for import failures.","Attempt to reuse an existing session, logging the outcome and returning the connected account if available.","If no session exists, attempt a new connection, logging all connection steps and outcomes.","Log and handle all errors, including inner exceptions, with clear, actionable diagnostic information.","Provide comprehensive inline comments at every stage explaining the logic and error handling.","Return a clear status or account identifier, or $null/$false on failure, with all failures logged.","Match the robustness, documentation, and maintainability standards demonstrated in the revised utility module functions (Connect-ExchangeAdmin, Connect-Graph, Connect-TeamsService).","These standards must be enforced for all future and existing connection logic across the project."]},{"l":"8. Architecture: PowerShell String Interpolation and Linter Compliance","p":["Always use the PowerShell format operator (-f) for string interpolation when a variable is immediately followed by a colon, special character, or property accessor in double-quoted strings. This enres robust, linter-compliant, and maintainable code.","Example:","If the linter flags a false positive for valid code using the format operator or string concatenation, document the issue and proceed with the format operator approach, as it is the most robust and idiomatic for PowerShell.","Report any persistent false positives to the linter maintainers and include a comment in the code referencing the issue.","Do not attempt to workaround the linter by using less robust or less readable code. Prioritise code correctness and maintainability."]},{"l":"9. Approved Verb Usage","p":["All functions, scripts, and modules must use approved PowerShell verbs. This ensures discoverability and compliance with linter rules. Any refactor or rename must update all references throughout the project."]},{"l":"10. Linting and Static Analysis","p":["All code must pass PSScriptAnalyzer linting with no critical errors. Linting and static analysis are mandatory before every major commit or release to maintain code quality and consistency."]},{"l":"11. Refactor Hygiene","p":["Any rename or modularisation must include a project-wide update of all references and documentation. No legacy or obsolete references are permitted after a refactor to ensure clarity and maintainability."]},{"l":"12. Error Handling and User Experience","p":["All error messages must be clear, actionable, and remain visible until acknowledged by the user. All catch blocks must end with a user acknowledgement prompt unless handled globally. Error handling must include context such as script name, operation, and error details."]},{"l":"13. Accessible Output and Documentation","p":["All user-facing output and documentation must use EN-AU spelling and accessible, inclusive language to ensure understanding and usability for all users."]},{"l":"14. Session Validation","p":["After any connection attempt, session validity must be confirmed before proceeding with operations. If the session is not valid, operations must be skipped with clear messaging to avoid confusion and ensure proper error handling."]}],[{"l":"3. Design Philosophy \uD83D\uDEE1","p":["\uD83D\uDCBE Soft-deletion only— desks and rooms are never fully deleted","\uD83D\uDCA1 Pre-validation of all inputs","\uD83D\uDCE6 Reversible operations— metadata snapshots, test cleanup","\uD83D\uDD12 Never destroys without confirmation","\uD83D\uDD04 Project-wide refactor hygiene— all renames and modularisation are performed project-wide, with automated updates to all references and documentation to prevent legacy issues."]}],[{"l":"4. Folder Structure \uD83D\uDCC1","p":["WARNING: Due to continued development, this is subject to change.","Folder tree"]},{"l":"Folder tree","p":["Each folder and file is annotated above with a short summary of its purpose and contents."]}],[{"l":"5. Data Safety \uD83D\uDD10","p":["All changes made using Exchange and Graph are:","Pre-validated","Logged in .Logs\\","Cached locally for rollback","Backed up with JSON snapshots","Restorable from backup","This ensures that, in the event you make a mistake, you have a last known good config to restore from, and/or can understand exactly what changes were made and walk them back manually if you wish.","Further, when a resource is decomissioned - it is never deleted. It is simply removed from the Global Address List (GAL), to ensure that existing bookings still assigned to it can be shown, and utilisation statistics are available."]}],[{"l":"Modules","p":["This document describes all PowerShell modules in the OfficeSpaceManager project, their purposes, and the key functions or features they provide. This supports maintainability, discoverability, and onboarding for new contributors.","CLI","Configuration","Logging","Reporting","SiteManagement","UserManagement","Utilities","Notes"]},{"l":"CLI","p":["Path: Modules/CLI/CLI.psm1","Provides all core CLI menu rendering, navigation, and user interaction logic.","Exported Functions:","Get-PanelHeader— Renders a standard panel header for CLI menus (replaces obsolete Display-PanelHeader).","Get-ActionHistory— Displays recent user or system actions (replaces obsolete Show-ActionHistory).","New-SecurePassword— Generates a secure password for provisioning flows.","Note:","All references to obsolete functions have been updated project-wide for verb compliance and maintainability.","Used by: All main CLI scripts and wizards."]},{"l":"Configuration","p":["Path: Modules/Configuration/Configuration.psm1","Handles configuration loading, validation, and backup/restore logic.","Exported Functions:","Create-ConfigBackup— Creates a backup of the current configuration.","Restore-ConfigBackup— Restores configuration from a backup.","Try-LoadJson— Helper to safely load JSON files.","Run-FirstTimeSetup— Runs initial setup and validation.","Validate-ExchangeSetup— Validates Exchange Online configuration.","Validate-PlacesFeatures— Validates Places features configuration.","Enable-PlacesFeatures— Enables Places features in the environment.","Used by: Configuration scripts, backup/restore, and validation flows."]},{"l":"Logging","p":["Path: Modules/Logging/Logging.psm1","Centralises all logging, transcript, and error reporting logic.","Exported Functions:","Write-Log— Writes timestamped log entries to file and console.","Note:","Full session transcript and input logging are now supported via the -LogVerbose flag in Invoke-MainMenu.ps1.","Used by: All scripts for consistent logging and diagnostics."]},{"l":"Reporting","p":["Path: Modules/Reporting/Reporting.psm1","Provides reporting, export, and summary generation utilities.","Exported Functions:","Export-AllTemplates— Exports all supported metadata templates.","Export-MetadataTemplates— Exports pathway and desk role templates.","Generate-Report— Generates a report (see module for details).","Show-Report— Displays a report (see module for details).","Used by: Export, reporting, and summary scripts."]},{"l":"SiteManagement","p":["Path: Modules/SiteManagement/SiteManagement.psm1","Manages site, building, floor, desk, and resource metadata.","Exported Functions:","Export-SiteStructureTemplates— Exports site structure templates.","Import-SiteStructureFromCSV— Imports site structure from CSV.","Get-SiteStructure— Lists the current site structure.","Sync-MetadataToCloud— Syncs local metadata to the cloud.","Used by: Site management, import/export, and sync scripts."]},{"l":"UserManagement","p":["Path: Modules/UserManagement/UserManagement.psm1","Handles user provisioning, assignment, and user-related metadata.","Exported Functions:","(No implemented functions yet; placeholder for Get-User, Add-User as per TODO in module.)","Used by: User management and provisioning scripts."]},{"l":"Utilities","p":["All connection logic is proactively called and robustly error-handled in the main entry script ( Invoke-MainMenu.ps1).","All connection routines handle authentication cancellation and log all outcomes.","All error messages require user acknowledgement and remain visible until acknowledged.","All modules and functions use approved PowerShell verbs for discoverability and linter compliance.","All modules are validated with PSScriptAnalyzer for code quality.","All output and documentation use EN-AU spelling and accessible, inclusive language.","Any rename or modularisation includes a project-wide update of all references and documentation.","Connect-ExchangeAdmin— Connects to Exchange Online as an admin (robust, session-reusing, authoritative session validation, clear diagnostic output).","Connect-Graph— Connects to Microsoft Graph (robust, session-reusing, authoritative session validation, clear diagnostic output).","Connect-TeamsService— Connects to Microsoft Teams service (robust, session-reusing, authoritative session validation, clear diagnostic output).","Exported Functions:","Get-StandardDeskName— Returns a standardised desk name for a given resource.","Notes:","Path: Modules/Utilities/Utilities.psm1","Provides shared utility functions (validation, file I/O, connection helpers, etc.).","Resolve-OfficeSpaceManagerRoot.ps1— Robustly resolves the project root and sets $env:OfficeSpaceManagerRoot for all module imports. This script is dot-sourced at the top of every script that uses Import-Module, ensuring all module paths are absolute and error-proof regardless of working directory or invocation method.","Special Utility:","Used by: All scripts and modules for common logic."]},{"i":"modules-1","l":"Modules","p":["CLI: User interface and menu logic","Configuration: Handles configuration and validation","Logging: Centralised logging and error handling","Reporting: Generates reports and exports","SiteManagement: Manages sites, buildings, floors, desks","UserManagement: User and permissions management","Utilities: Helper functions and root resolution"]},{"l":"Notes","p":["All modules follow the documentation and quality standards described in CommonInstructions.instructions.md.","For detailed function lists, see the comment-based help in each .psm1 file.","This document should be updated whenever modules are added, removed, or significantly changed."]}],[{"l":"TODO","p":["Additional TODOs from Recent Work","Backup and Restore","Bulk Operations and Data Validation","Code Reuse and Modularity","Configuration Management","Documentation and Comments","Error Recovery and Reporting","Logging and Error Handling","Modularisation","Module Packaging","Naming Conventions","Output Formatting","Parameter Validation and Consistency","Performance","Project Specification TODOs","Security","Specification Alignment","Summary Table","Tasks","Testing and Validation","This document summarizes one of my most recent code review findings and improvement opportunities for the OfficeSpaceManager project. Each area in the summary table links to a detailed section below, including observations, opportunities, and where to apply them.","User Experience (CLI Menus)"]},{"l":"Summary Table","p":["Add help/comments","Add validation, consistency","Add versioning, integrity checks","Add/expand Pester tests","Aggregate/report errors in batch jobs","All functions","All relevant scripts and documentation","All scripts","All scripts, especially CLI, Shared","All scripts/functions","All user-facing scripts","Area","Auth scripts","Backup/Restore","Bulk scripts","Centralize config","Centralize, standardize","CLI","CLI, Shared, OrphanFixer, TestSuite","Code Reuse","Configuration","Configuration, Shared","Configuration\\BackupRestore.ps1","Create PowerShell module","Data Validation","Documentation","Error Reporting","Logging/Error","Modularisation","Module Packaging","Naming","Opportunity","Output Formatting","Parameter Validation","Performance","Refactor repeated logic","Secure credential handling","Security","Shared","Specification Alignment","Standardize CLI menus","Standardize naming conventions","Standardize output","TemplateManagement, SiteManagement","Testing","TestSuite, new Tests folder","Track and implement all specifications","Use parallel processing","User Experience","Validate CSV/JSON before import","Where"]},{"l":"Modularisation","p":["Status: Complete// NOTE - Modularisation","TODO: Modularisation - First pass","Observation: As part of cleaning up the code, it becomes harder to understand where each function is located, and due to the size of the .ps1 files they're contained within, harder to navigate.","Opportunities:","Fully modularise all function code within the project","Where:","Whole project"]},{"l":"Logging and Error Handling","p":["Status: Complete// NOTE - Logging and Error Handling","TODO: Improve Logging and Error Handling","Observation: Some scripts use custom logging and error handling, while others use inline Write-Host or Write-Error. Not all scripts leverage shared logging utilities.","Opportunities:","TODO: Refactor all scripts to use centralized logging functions from Shared\\Logging.ps1.","TODO: Replace direct Write-Host/ Write-Error with Write-Log or similar.","TODO: Ensure all try/catch blocks use a standard error reporting function.","Where:","CLI\\*, Configuration\\*, OrphanFixer\\*, SiteManagement\\*, and any script with direct output or error handling."]},{"l":"Parameter Validation and Consistency","p":["Status: Incomplete// FIXME - Parameter Validation and Consistency","Observation: Some functions/scripts use [Parameter()] attributes and validation, others accept parameters without validation.","Opportunities:","TODO: Add [Parameter(Mandatory=$true)] and [ValidateNotNullOrEmpty()] to all function parameters.","TODO: Use consistent parameter naming and casing.","Where:","All function definitions, especially in Shared\\, SiteManagement\\, and TemplateManagement\\."]},{"l":"Code Reuse and Modularity","p":["Status: Incomplete// FIXME - Code Reuse and Modularity","Observation: There is some duplication of logic (e.g., connecting to Exchange/Graph, reading/writing JSON).","Opportunities:","TODO: Move all connection logic to Shared\\Connection.ps1.","Mitigated by modularisation.","TODO: Centralize JSON/CSV read/write functions.","TODO: Refactor repeated code into reusable functions.","Where:","CLI\\*, Configuration\\*, OrphanFixer\\*, TestSuite\\*."]},{"l":"Naming Conventions","p":["Status: Incomplete// FIXME - Naming Conventions","Observation: Script and function names are mostly consistent, but some use different casing or abbreviations.","Opportunities:","TODO: Standardize on PascalCase for functions and scripts.","TODO: Prefix all public functions with OSM-(e.g., OSM-ConnectToExchange).","Where:","All scripts and function definitions."]},{"l":"Documentation and Comments","p":["Status: In progress// FIXME - Documentation and Comments","TODO: Fix Documentation and Comments","Forms part of project instructions.","TODO: Revisit resource and alias naming conventions, and look for ways to provide options within the CLI for constructing a naming convention, modifying a naming convention, and applying modified naming conventions to existing resources where needed (version 2 release feature)","Observation: Some scripts have good comments, others lack parameter/function descriptions.","Opportunities:","TODO: Add comment-based help to all functions (.SYNOPSIS, .DESCRIPTION, .PARAMETER, .EXAMPLE).","TODO: Ensure every script has a header comment describing its purpose.","Addressing of both these issues forms part of project instructions.","Where:","All scripts, especially in Shared\\, CLI\\, and TestSuite\\."]},{"l":"Testing and Validation","p":["Status: Incomplete// FIXME - Testing and Validation","Observation: There is a TestSuite, but not all core functions are covered by tests.","Opportunities:","TODO: Add Pester tests for all critical functions (connection, provisioning, sync, orphan detection).","TODO: Validate output and error scenarios.","Where:","TestSuite\\*, and create a Tests\\ folder for unit tests."]},{"l":"Configuration Management","p":["Status: Incomplete// FIXME - Configuration Management","Observation: Configuration is spread across scripts and JSON files.","Opportunities:","TODO: Centralize all configuration in a single JSON or PowerShell data file.","TODO: Load configuration at startup and pass as needed.","Where:","Configuration\\*, Shared\\*."]},{"l":"User Experience (CLI Menus)","p":["Status: Incomplete// FIXME - User Experience (CLI Menus)","Observation: CLI menus are functional but could be more consistent in style and navigation.","Opportunities:","TODO: Standardize menu prompts, input validation, and navigation (e.g., always offer \"Back\" and \"Exit\").","TODO: Use a shared menu rendering function.","Where:","CLI\\*."]},{"l":"Bulk Operations and Data Validation","p":["Status: Incomplete// FIXME - Bulk Operations and Data Validation","Observation: CSV import/export scripts do not always validate data before processing.","Opportunities:","TODO: Add schema validation for CSV/JSON before import.","TODO: Provide clear error messages for invalid data.","Where:","TemplateManagement\\*, SiteManagement\\*."]},{"l":"Module Packaging","p":["Status: Incomplete// FIXME - Module Packaging","Observation: Reusable functions are in .ps1 files, not a PowerShell module.","Opportunities:","TODO: Package shared functions as a .psm1 module with a manifest.","TODO: Import the module in all scripts.","Where:","Shared\\*."]},{"l":"Backup and Restore","p":["Status: Incomplete// FIXME - Backup and Restore","Observation: Backup/restore scripts exist but could be more robust.","Opportunities:","TODO: Add versioning to backups.","TODO: Validate backup integrity before restore.","Where:","Configuration\\BackupRestore.ps1."]},{"l":"Security","p":["Status: Incomplete// FIXME - Security","Observation: Some scripts may store credentials or tokens in plain text.","Opportunities:","TODO: Use Get-Credential or secure vaults for sensitive data.","TODO: Never write credentials to disk.","Where:","Any script handling authentication."]},{"l":"Performance","p":["Status: Incomplete// FIXME - Performance","Observation: Some scripts process resources sequentially.","Opportunities:","TODO: Use parallel processing ( ForEach-Object -Parallel) for large bulk operations.","Where:","Bulk provisioning, sync, and orphan detection scripts."]},{"l":"Output Formatting","p":["Status: Incomplete// FIXME - Output Formatting","Observation: Output is sometimes raw, sometimes formatted.","Opportunities:","TODO: Standardize output formatting (tables, lists, JSON).","TODO: Offer a -Verbose or -Quiet switch.","Where:","All user-facing scripts."]},{"l":"Error Recovery and Reporting","p":["Status: Incomplete// FIXME - Error Recovery and Reporting","Observation: Batch operations may stop on first error.","Opportunities:","TODO: Implement error aggregation and summary reporting at the end of batch jobs.","Where:","Bulk import/export, sync, and other batch processing scripts."]},{"l":"Specification Alignment","p":["Status: Incomplete// FIXME - Specification Alignment","Observation: Not all features and requirements from SPECIFICATION.md are clearly tracked or implemented.","Opportunities:","TODO: Review SPECIFICATION.md and ensure all items are addressed in the project.","TODO: Create tasks or documentation for any missing features or requirements.","Where:","Review entire project against SPECIFICATION.md."]},{"l":"Project Specification TODOs","p":["Observation: The following items from the project specification require implementation:","Opportunities:","Status: Incomplete// FIXME - Project Specification TODOs","TODO: Add a menu option and script for first-time setup and validation of Exchange/Teams/Places configuration.","TODO: Add/complete bulk import/export (CSV) for all resource types (sites, buildings, floors, desks, desk pools, etc.), with schema validation and error reporting.","TODO: Add/complete menu-driven flows for resource lifecycle management (create, rename, reassign, retire desks/rooms/equipment).","TODO: Add/expand backup/restore versioning, integrity checks, and disaster recovery documentation.","TODO: Add/expand error aggregation and summary reporting for all batch/bulk operations.","TODO: Add/expand Pester tests for all critical functions and flows, and document how to run them.","TODO: Add/expand support/escalation process and post-incident logging for production scripts.","TODO: Check and correct any absolute dot-sourcing in the project (for example C:\\Users\\pc\\Documents\\GitProjects\\OfficeSpaceManager)","TODO: Document all supported OS versions, PowerShell versions, and dependencies in README.md and script headers.","TODO: Ensure all CLI menus use a consistent style, navigation, and input validation, with shared rendering functions.","TODO: Ensure all metadata management scripts support local caching, offline storage, and synchronisation.","TODO: Ensure all scripts are idempotent and safe to run multiple times without causing inconsistent state.","TODO: Ensure all scripts clean up after themselves (temp files, test data, connections) and document cleanup steps.","TODO: Ensure all scripts use centralised, timestamped logging and standardised error handling (via Logging module).","TODO: Ensure all scripts/modules include a version number, changelog, and rollback/undo instructions.","TODO: Ensure all user-facing output and documentation uses inclusive, accessible language and formatting.","TODO: Ensure native integration with ExchangeOnlineManagement, MicrosoftTeams, and Microsoft Graph modules, with robust connection logic.","TODO: Expand the simulation test suite to cover all provisioning logic, with cleanup tools and test result logging.","TODO: Implement a unified, menu-driven CLI entry point that covers all major operations (resource provisioning, metadata management, backup/restore, etc.).","TODO: Implement full and partial backup/restore for configuration and metadata, with versioning and integrity checks.","TODO: Refactor codebase to ensure all modules/scripts are easily extensible for future features/domains.","TODO: Review and update all scripts for secure credential handling (no hardcoded secrets, use secure vaults or managed identities).","TODO: Review and update README.md to ensure all specification requirements are documented and up to date.","TODO: Validate all user input, parameters, and imported data (CSV/JSON) before processing."]},{"l":"Tasks","p":["Refactor all scripts for robust root-based referencing","Ensure all modules use approved verbs","Update documentation for new architecture","Add unit tests for all exported functions"]},{"l":"Additional TODOs from Recent Work","p":["TODO: Continue real-world testing of Exchange, Teams, and Places connection routines to ensure session validation is reliable in all scenarios (including authentication cancellation and session reuse).","TODO: Document and address any remaining edge cases where Connect-ExchangeOnline or Get-ConnectionInformation may not reliably indicate session status.","TODO: Perform a final recursive search for any lingering references to obsolete function names or unapproved verbs in scripts, modules, and documentation.","TODO: Ensure all future refactors and renames are accompanied by project-wide updates to references and documentation.","TODO: Address any remaining markdownlint warnings (e.g., blank lines around lists) in documentation.","TODO: Ensure all scripts and modules pass PSScriptAnalyzer linting before each release.","TODO: Review all legacy scripts to ensure error messages require user acknowledgement and remain visible until acknowledged.","TODO: Audit all output and documentation for EN-AU spelling and accessible, inclusive language.","TODO: Expand end-to-end and edge case testing for connection logic, error handling, and session validation."]}],[{"l":"Known Issues","p":["This is not a comprehensive list, and is still being updated and maintained as I work through things.","Overall","Main menu"]},{"l":"Overall","p":["Full script still to be tested from end to end. Currently working through menus to find where faults are and address these as we go along.","Better Dot-sourcing structure using a helper function, and scripts to keep it updated as new code is introduced.","Improve inline documentation where apporpriate and reasonable","Full recursive code review","Connection logic: Occasional false positives for Exchange connection status—sometimes a session is reported as established but is not valid for subsequent operations. Session validation logic has been improved, but further real-world testing is needed. If Connect-ExchangeOnline does not return a session object, fallback to Get-ConnectionInformation may still be unreliable in rare cases.","Refactor hygiene: All lingering references to unapproved verbs have been replaced, but legacy scripts or documentation may still reference obsolete function names. Full recursive search and clean-up is ongoing.","Linting/static analysis: All scripts now pass PSScriptAnalyzer linting, but markdownlint warnings (e.g., blank lines around lists) may still be present in documentation.","Error handling: All error messages now require user acknowledgement, but some legacy scripts may not fully comply. Review and update is ongoing.","Accessibility: All output and documentation use EN-AU spelling and accessible, inclusive language, but some older comments or prompts may need review.","Testing: End-to-end testing of all connection scenarios (including authentication cancellation, session reuse, and error handling) is still required."]},{"l":"Main menu","p":["Recent actions not displaying information of actions, only timestamps","Some menu functions not working, causing failure and exit","Exit method needs to be optimised to avoid re-downloading information where recently updated and/or not changed, with user options to be considered (this was implemented at the start of the script and needs to be reviewed for all scripts)."]}],[{"l":"Support \uD83D\uDE4B","p":["If you're having trouble:","View the current log in .\\Logs\\.","Use Export Action History in the CLI.","Provide the export log when requesting help.","Remember: This project is still under very active development, and is nowhere near ready for prime-time. Chances are the problem you're having hasn't yet been tested for, identified, or worked on to ensure valid outcomes - so please bear that in mind."]}],[{"l":"Contributing to the project","p":["Issues and bug reports"]},{"l":"Issues and bug reports","p":["This project is yet to reach a stage where this will be started, as it's still in early development.","Once that stage is reached, more information will be added here."]}],[{"l":"Donations and thank you's","p":["Like to say thank you?"]},{"l":"Like to say thank you?","p":["Feel welcome to:","Buy me a ko-fi"]}],[{"l":"License","p":["MIT License","Copyright (c) 2025, Michael Harris, All rights reserved.","Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."]}]]